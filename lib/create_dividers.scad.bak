// Creates the dividers for the above.
// Again the container_size provided is the internal dimensions.

module create_divider(container_size = [1,1,1,], divider_width = 2.0)
{
    difference() {
        cube([container_size[0] + 0.5, divider_width, container_size[2] + 0.5]);
        translate([(container_size[0]/2) - (divider_width/2) - 0.125 ,0,0])
            cube([divider_width + 0.25, divider_width + 0.25, (container_size[2]/2) + 0.25]);
        }
}

module create_dividers(container_size = [1,1,1], divider_width = 2.0)
{
    union() {
        // Two dividers so the first is at 1/3 of the height, minus half the width, + half the 
        // length we added to the long divider.
        short_divider_y_offset_1 = (container_size[1] / 3) - (divider_width / 2) + 0.25;
        translate([0, short_divider_y_offset_1, 0])
            difference() {
                cube([container_size[0] + 0.5, divider_width, container_size[2] + 0.5]);
                translate([(container_size[0]/2) - (divider_width/2) ,0,0])
                    cube([divider_width + 0.25, divider_width + 0.25, (container_size[2]/2) + 0.25]);
            }
        // The second divider is at 2/3 the height, minutes half the width + half the length we 
        // added to the long divider.
        short_divider_y_offset_2 = (container_size[1] / 1.5) - (divider_width / 2) + 0.25;
        translate([0, short_divider_y_offset_2, 0])
            cube([container_size[0] + 0.5, divider_width, container_size[2] + 0.5]);
        // Half the width of the container, half the divider, plus half the width we added to 
        // the width ways dividers.
        long_divider_x_offset = (container_size[0] / 2) - (divider_width / 2) + 0.25;
        translate([long_divider_x_offset, 0, 0])
            cube([divider_width, container_size[1] + 0.5, container_size[2] + 0.5]);
    }
}